package ru.bot.demobot.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.bot.demobot.config.BotConfig;
import ru.bot.demobot.model.BodyParameters;
import ru.bot.demobot.model.Exercise;
import ru.bot.demobot.model.User;
import ru.bot.demobot.repository.BodyParametersRepository;
import ru.bot.demobot.repository.ExerciseRepository;
import ru.bot.demobot.repository.UserRepository;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    final BotConfig config;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ExerciseRepository exerciseRepository;

    @Autowired
    private BodyParametersRepository bodyParametersRepository;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    private final Map<Long, Exercise> activeExercises = new HashMap<>();
    // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, Integer> restTimes = new HashMap<>();
    private final Map<Long, Timer> restTimers = new HashMap<>(); // –•—Ä–∞–Ω–∏–º —Ç–∞–π–º–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞

    private final Map<Long, BodyParameters> bodyParamsInput = new HashMap<>();
    private final Map<Long, String> userState = new HashMap<>();

    public TelegramBot(BotConfig config) {
        this.config = config;
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String message = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (userState.containsKey(chatId)) {
                processBodyParametersInput(chatId, message);
                return;
            }

            if (activeExercises.containsKey(chatId)) {
                Exercise exercise = activeExercises.get(chatId);

                switch (message) {
                    case "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
                        finishExercise(chatId);
                        break;

                    case "–ï—â–µ":
                        addNewSet(chatId,message, exercise); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
                        break;

                    default:
                        processInput(chatId, message, exercise);
                }
            } else {
                switch (message) {
                    case "/start":
                        startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                        sendMenuButtons(chatId);
                        break;
                    case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
                        addTraining(chatId);
                        break;
                    case "/help":
                        helpCommandReceived(chatId);
                        break;
                    case "/settings":
                        startBodyParametersInput(chatId);
                        break;
                    case "üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
                        myTraining(chatId);
                        break;
                    case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                        statisticsTraining(chatId);
                        break;
                    case "‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞":
                        startBodyParametersInput(chatId);
                        break;
                    case "\uD83C\uDD98 –ü–æ–º–æ—â—å":
                        helpCommandReceived(chatId);
                        break;
                    default:
                        sendMessage(chatId, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é");
                }
            }
        }
    }

    private void sendBodyParametersButtons(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("–ó–∞–≤–µ—Ä—à–∏—Ç—å");

        keyboardMarkup.setKeyboard(Collections.singletonList(row));

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void processBodyParametersInput(long chatId, String message) {
        if ("–ó–∞–≤–µ—Ä—à–∏—Ç—å".equals(message)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            userState.remove(chatId);
            bodyParamsInput.remove(chatId);

            sendMessage(chatId, "–ü—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.");
            sendMenuButtons(chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return;
        }

        BodyParameters params = bodyParamsInput.get(chatId);

        try {
            switch (userState.get(chatId)) {
                case "HEIGHT":
                    int height = Integer.parseInt(message);
                    if (height < 120 || height > 250) {
                        sendMessage(chatId, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 120 –¥–æ 250 —Å–º.");
                        return;
                    }
                    params.setHeight(height);
                    userState.put(chatId, "WEIGHT");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):");
                    break;

                case "WEIGHT":
                    int weight = Integer.parseInt(message);
                    if (weight < 30 || weight > 500) {
                        sendMessage(chatId, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 30 –¥–æ 500 –∫–≥.");
                        return;
                    }
                    params.setWeight(weight);
                    userState.put(chatId, "BICEPS");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∏—Ü–µ–ø—Å–∞ (–≤ —Å–º):");
                    break;

                case "BICEPS":
                    int biceps = Integer.parseInt(message);
                    if (biceps < 10 || biceps > 100) {  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–∏—Ü–µ–ø—Å–∞
                        sendMessage(chatId, "–†–∞–∑–º–µ—Ä –±–∏—Ü–µ–ø—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 —Å–º.");
                        return;
                    }
                    params.setBiceps(biceps);
                    userState.put(chatId, "CHEST");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (–≤ —Å–º):");
                    break;

                case "CHEST":
                    int chest = Integer.parseInt(message);
                    if (chest < 50 || chest > 150) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–¥–∏
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 150 —Å–º.");
                        return;
                    }
                    params.setChest(chest);
                    userState.put(chatId, "WAIST");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (–≤ —Å–º):");
                    break;

                case "WAIST":
                    int waist = Integer.parseInt(message);
                    if (waist < 50 || waist > 150) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–ª–∏–∏
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 150 —Å–º.");
                        return;
                    }
                    params.setWaist(waist);
                    userState.put(chatId, "HIPS");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (–≤ —Å–º):");
                    break;

                case "HIPS":
                    int hips = Integer.parseInt(message);
                    if (hips < 50 || hips > 150) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–¥–µ—Ä
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 150 —Å–º.");
                        return;
                    }
                    params.setHips(hips);
                    userState.put(chatId, "THIGHS");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞ (–≤ —Å–º):");
                    break;

                case "THIGHS":
                    int thighs = Integer.parseInt(message);
                    if (thighs < 20 || thighs > 100) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–¥—Ä–∞
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 100 —Å–º.");
                        return;
                    }
                    params.setThighs(thighs);
                    userState.put(chatId, "CALVES");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –∏–∫—Ä (–≤ —Å–º):");
                    break;

                case "CALVES":
                    int calves = Integer.parseInt(message);
                    if (calves < 20 || calves > 60) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–∫—Ä
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç –∏–∫—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 60 —Å–º.");
                        return;
                    }
                    params.setCalves(calves);
                    userState.put(chatId, "SHOULDERS");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –ø–ª–µ—á (–≤ —Å–º):");
                    break;

                case "SHOULDERS":
                    int shoulders = Integer.parseInt(message);
                    if (shoulders < 30 || shoulders > 120) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–µ—á
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç –ø–ª–µ—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 120 —Å–º.");
                        return;
                    }
                    params.setShoulders(shoulders);
                    userState.put(chatId, "BUTTOCKS");
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —è–≥–æ–¥–∏—Ü (–≤ —Å–º):");
                    break;

                case "BUTTOCKS":
                    int buttocks = Integer.parseInt(message);
                    if (buttocks < 40 || buttocks > 130) {  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —è–≥–æ–¥–∏—Ü
                        sendMessage(chatId, "–û–±—Ö–≤–∞—Ç —è–≥–æ–¥–∏—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 40 –¥–æ 130 —Å–º.");
                        return;
                    }
                    params.setButtocks(buttocks);
                    params.setChatId(chatId);
                    bodyParametersRepository.save(params);

                    userState.remove(chatId);
                    bodyParamsInput.remove(chatId);

                    sendMessage(chatId, "‚úÖ –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
                    sendMenuButtons(chatId);
                    break;
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
        }
    }

    private void startBodyParametersInput(long chatId) {
        sendBodyParametersButtons(chatId);
        bodyParamsInput.put(chatId, new BodyParameters());
        userState.put(chatId, "HEIGHT");
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):");

    }

    private void statisticsTraining(long chatId) {
        List<BodyParameters> bodyParamsList = bodyParametersRepository.findByChatId(chatId);

        if (!bodyParamsList.isEmpty()) {
            StringBuilder formattedStats = new StringBuilder("üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–∞:*\n\n");

            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å–∏
            BodyParameters firstRecord = bodyParamsList.get(0);
            BodyParameters lastRecord = bodyParamsList.get(bodyParamsList.size() - 1);

            for (BodyParameters params : bodyParamsList) {
                formattedStats.append(String.format(
                        "üìÖ *–î–∞—Ç–∞:* %s\n" +
                                "üìè *–†–æ—Å—Ç:* %d —Å–º\n" +
                                "‚öñ *–í–µ—Å:* %d –∫–≥\n\n" +
                                "üí™ *–ë–∏—Ü–µ–ø—Å:* %d —Å–º\n" +
                                "üèãÔ∏è *–ì—Ä—É–¥—å:* %d —Å–º\n" +
                                "üéØ *–¢–∞–ª–∏—è:* %d —Å–º\n" +
                                "üçë *–ë—ë–¥—Ä–∞:* %d —Å–º\n" +
                                "ü¶µ *–ë–µ–¥—Ä–æ:* %d —Å–º\n" +
                                "ü¶∂ *–ò–∫—Ä—ã:* %d —Å–º\n" +
                                "üèπ *–ü–ª–µ—á–∏:* %d —Å–º\n" +
                                "üçë *–Ø–≥–æ–¥–∏—Ü—ã:* %d —Å–º\n\n",
                        LocalDate.now().format(DateTimeFormatter.ofPattern("dd MMMM yyyy")),
                        params.getHeight(), params.getWeight(),
                        params.getBiceps(), params.getChest(), params.getWaist(),
                        params.getHips(), params.getThighs(), params.getCalves(),
                        params.getShoulders(), params.getButtocks()
                ));
                formattedStats.append("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            formattedStats.append("üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:*\n\n");
            formattedStats.append(String.format(
                    "‚öñ *–í–µ—Å:* %d –∫–≥ (%+d –∫–≥)\n" +
                            "üí™ *–ë–∏—Ü–µ–ø—Å:* %d —Å–º (%+d —Å–º)\n" +
                            "üèãÔ∏è *–ì—Ä—É–¥—å:* %d —Å–º (%+d —Å–º)\n" +
                            "üéØ *–¢–∞–ª–∏—è:* %d —Å–º (%+d —Å–º)\n" +
                            "üçë *–ë—ë–¥—Ä–∞:* %d —Å–º (%+d —Å–º)\n" +
                            "ü¶µ *–ë–µ–¥—Ä–æ:* %d —Å–º (%+d —Å–º)\n" +
                            "ü¶∂ *–ò–∫—Ä—ã:* %d —Å–º (%+d —Å–º)\n" +
                            "üèπ *–ü–ª–µ—á–∏:* %d —Å–º (%+d —Å–º)\n" +
                            "üçë *–Ø–≥–æ–¥–∏—Ü—ã:* %d —Å–º (%+d —Å–º)\n",
                    lastRecord.getWeight(), lastRecord.getWeight() - firstRecord.getWeight(),
                    lastRecord.getBiceps(), lastRecord.getBiceps() - firstRecord.getBiceps(),
                    lastRecord.getChest(), lastRecord.getChest() - firstRecord.getChest(),
                    lastRecord.getWaist(), lastRecord.getWaist() - firstRecord.getWaist(),
                    lastRecord.getHips(), lastRecord.getHips() - firstRecord.getHips(),
                    lastRecord.getThighs(), lastRecord.getThighs() - firstRecord.getThighs(),
                    lastRecord.getCalves(), lastRecord.getCalves() - firstRecord.getCalves(),
                    lastRecord.getShoulders(), lastRecord.getShoulders() - firstRecord.getShoulders(),
                    lastRecord.getButtocks(), lastRecord.getButtocks() - firstRecord.getButtocks()
            ));

            sendMessage(chatId, formattedStats.toString());
        } else {
            sendMessage(chatId, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ \"‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞\".");
        }
    }


    private void myTraining(long chatId) {
        List<Exercise> exercises = exerciseRepository.findByChatId(chatId);

        if (exercises.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.");
        } else {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
            Map<String, Map<String, List<Exercise>>> exercisesByDateAndName = exercises.stream()
                    .collect(Collectors.groupingBy(exercise -> exercise.getCreatedAt().toLocalDate().toString(),
                            Collectors.groupingBy(Exercise::getExerciseName)));

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMMM yyyy");

            StringBuilder response = new StringBuilder("üìù *–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n");

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–ø–æ –¥–∞—Ç–µ)
            for (Map.Entry<String, Map<String, List<Exercise>>> dateEntry : exercisesByDateAndName.entrySet()) {
                String date = dateEntry.getKey();
                Map<String, List<Exercise>> exercisesForDate = dateEntry.getValue();

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                LocalDate localDate = LocalDate.parse(date);
                String formattedDate = localDate.format(formatter);
                response.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
                response.append("üìÖ *–î–∞—Ç–∞:* ").append(formattedDate).append("\n");
                response.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");

                int totalDayWeight = 0; // –û–±—â–∏–π –≤–µ—Å –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å

                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                for (Map.Entry<String, List<Exercise>> exerciseEntry : exercisesForDate.entrySet()) {
                    String exerciseName = exerciseEntry.getKey();
                    List<Exercise> exerciseList = exerciseEntry.getValue();

                    // –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–∏–π –≤–µ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
                    int totalWeightForExercise = exerciseList.stream()
                            .mapToInt(exercise -> exercise.getWeight() * exercise.getRepetitions())
                            .sum();

                    response.append("  \uD83E\uDD96 *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:* ").append(exerciseName).append("\n");

                    // –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤–µ—Å –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                    for (Exercise exercise : exerciseList) {
                        response.append("    \uD83D\uDC1C –í–µ—Å: ").append(exercise.getWeight()).append(" –∫–≥\n")
                                .append("    \uD83E\uDEBF –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ").append(exercise.getRepetitions()).append("\n");
                    }

                    // –û–±—â–∏–π –≤–µ—Å –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
                    response.append("  \uD83E\uDD90 *–û–±—â–∏–π –≤–µ—Å –∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:* ").append(totalWeightForExercise).append(" –∫–≥\n");
                    response.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫ –æ–±—â–µ–º—É –≤–µ—Å—É –∑–∞ –¥–µ–Ω—å
                    totalDayWeight += totalWeightForExercise;
                }

                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã
                response.append("\n");
                response.append("==============================\n");
                response.append("   üèÖ *–û–±—â–∏–π –≤–µ—Å –∑–∞ –¥–µ–Ω—å:* ").append(totalDayWeight).append(" –∫–≥\n");
                response.append("==============================\n");
            }

            sendMessage(chatId, response.toString());
        }
    }



    private void startCommandReceived(long chatId, String firstName) {
        userRepository.findByChatId(chatId).ifPresentOrElse(
                user -> sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"),
                () -> {
                    User newUser = new User();
                    newUser.setChatId(chatId);
                    newUser.setName(firstName);
                    userRepository.save(newUser);
                    sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
                }
        );
        String answer =
                "\uD83C\uDFCB\uFE0F\u200D‚ôÇ\uFE0F –í–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram! \uD83C\uDFCB\uFE0F\u200D‚ôÄ\uFE0F\n" +
                        "\n" +
                        "–ü—Ä–∏–≤–µ—Ç! " + firstName + "!\n" + " –Ø ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. \uD83D\uDCD3\uD83D\uDCAA\n" +
                        "–°–æ—Ö—Ä–∞–Ω—è–π —Å–≤–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! \uD83D\uDE80\n" +
                        "\n" +
                        "‚ú® –ß—Ç–æ —è —É–º–µ—é?\n" +
                        "‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ \uD83C\uDFCB\uFE0F\u200D‚ôÇ\uFE0F\n" +
                        "‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–µ—Å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥—ã" +
                        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" +
                        "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ \uD83D\uDCC5\n" +
                        "\n" +
                        "\uD83D\uDCA1 –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –¥–ª—è —Ç–µ–±—è!";
        sendMessage(chatId, answer);
    }


    private void helpCommandReceived(long chatId) {
        String answer = """
                ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
                /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
                \uD83C\uDD98 –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
                üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–º —Ç–∞–π–º–µ—Ä–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞.
                ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
                
                üèãÔ∏è *–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º!*""";
        sendMessage(chatId, answer);

    }

    private void addTraining(long chatId) {
        // –ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â–µ" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        sendWorkoutButtons(chatId);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:");

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        Exercise exercise = new Exercise();
        activeExercises.put(chatId, exercise);


    }

    private void processInput(long chatId, String message, Exercise exercise) {
        if (exercise.getExerciseName() == null) {
            exercise.setExerciseName(message); // –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            askForWeight(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –≤–µ—Å–∞
        } else if (exercise.getWeight() == 0) {
            try {
                int weight = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –≤–µ—Å–∞
                if (weight <= 0 || weight > 500) {
                    sendMessage(chatId, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 500 –∫–≥.");
                    return;
                }
                exercise.setWeight(weight);
                askForRepetitions(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.");
            }
        } else if (exercise.getRepetitions() == 0) {
            try {
                int repetitions = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                if (repetitions <= 0 || repetitions > 300) {
                    sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 300.");
                    return;
                }
                exercise.setRepetitions(repetitions); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                askForRestTime(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.");
            }
        } else if (exercise.getRestTime() == 0) {
            try {
                int restTime = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
                if (restTime <= 0 || restTime > 60) {
                    sendMessage(chatId, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç.");
                    return;
                }
                exercise.setRestTime(restTime); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
                restTimes.put(chatId, restTime); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
                saveExerciseSet(chatId, exercise); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                startRestTimeTimer(chatId, exercise); // –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–¥—ã—Ö–∞
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞.");
            }
        }
    }

    private void addNewSet(long chatId,String message, Exercise exercise) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–¥—ã—Ö–∞
        if (restTimers.containsKey(chatId)) {
            restTimers.get(chatId).cancel();
            restTimers.remove(chatId);
        }
        Exercise newSet = new Exercise();
        newSet.setExerciseName(exercise.getExerciseName());


        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–≤–æ–≥–æ –≤–µ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        activeExercises.put(chatId, newSet);
        askForWeight(chatId);
        if  (exercise.getWeight() == 0) {
            try {
                int weight = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –≤–µ—Å–∞
                if (weight <= 0 || weight > 500) {
                    sendMessage(chatId, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 500 –∫–≥.");
                    return;
                }
                exercise.setWeight(weight);
                askForRepetitions(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.");
            }
        } else if (exercise.getRepetitions() == 0) {
            try {
                int repetitions = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                if (repetitions <= 0 || repetitions > 300) {
                    sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 300.");
                    return;
                }
                exercise.setRepetitions(repetitions); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                askForRestTime(chatId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.");
            }
        } else if (exercise.getRestTime() == 0) {
            try {
                int restTime = Integer.parseInt(message); // –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
                if (restTime <= 0 || restTime > 60) {
                    sendMessage(chatId, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –±–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç.");
                    return;
                }
                exercise.setRestTime(restTime); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
                restTimes.put(chatId, restTime); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
                saveExerciseSet(chatId, exercise); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                startRestTimeTimer(chatId, exercise); // –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–¥—ã—Ö–∞
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞.");
            }
        }

    }

    private void startRestTimeTimer(long chatId, Exercise exercise) {
        sendMessage(chatId, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –Ω–∞—á–∞–ª–æ—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

        Timer timer = new Timer();
        restTimers.put(chatId, timer); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä

        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                restTimers.remove(chatId); // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                sendMessage(chatId, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø—Ä–æ—à–ª–æ! –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥?");
                askForAnotherSet(chatId);
            }
        }, exercise.getRestTime() * 60 * 1000); // –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }


    private void askForWeight(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):");
    }

    private void askForRepetitions(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:");
    }

    private void askForRestTime(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:");
    }

    private void askForAnotherSet(long chatId) {
        sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ '–ï—â–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
    }


    private void finishExercise(long chatId) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        if (restTimers.containsKey(chatId)) {
            restTimers.get(chatId).cancel();
            restTimers.remove(chatId);
        }

        sendMessage(chatId, "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ!");
        activeExercises.remove(chatId); // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sendMenuButtons(chatId);
    }

    private void saveExerciseSet(long chatId, Exercise exercise) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        Exercise savedExercise = new Exercise();
        savedExercise.setExerciseName(exercise.getExerciseName());
        savedExercise.setWeight(exercise.getWeight());
        savedExercise.setRepetitions(exercise.getRepetitions()); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        savedExercise.setRestTime(exercise.getRestTime());
        savedExercise.setChatId(chatId);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
        exerciseRepository.save(savedExercise);
    }

    private void sendMenuButtons(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —ç–∫—Ä–∞–Ω
        keyboardMarkup.setOneTimeKeyboard(false); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
        row1.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        row2.add("‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("\uD83C\uDD98 –ü–æ–º–æ—â—å");

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWorkoutButtons(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("–ï—â–µ");
        row.add("–ó–∞–≤–µ—Ä—à–∏—Ç—å");

        keyboardMarkup.setKeyboard(Collections.singletonList(row));

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –ï—â–µ. ");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(long chatId, String textToSend) {
        if (textToSend == null || textToSend.isEmpty()) {
            return  ; // –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(textToSend);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
