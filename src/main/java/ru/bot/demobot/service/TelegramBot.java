package ru.bot.demobot.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.bot.demobot.config.BotConfig;
import ru.bot.demobot.model.User;
import ru.bot.demobot.repository.UserRepository;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    final BotConfig config;

    @Autowired
    private UserRepository userRepository;


    public TelegramBot(BotConfig config) {
        this.config = config;
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String message = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (message) {
                case "/start":
                    startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                    sendMenuButtons(chatId);
                    break;
                case "/help":
                    helpCommandReceived(chatId);
                    break;
                case "/settings":
                    settingsComandReceived(chatId);
                    break;
                case "üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
                    myTraining(chatId);
                    break;
                case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
                    addTraining(chatId);
                    break;
                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    statisticsTraining(chatId);
                    break;
                case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                    settingsComandReceived(chatId);
                    break;
                case "\uD83C\uDD98 –ü–æ–º–æ—â—å":
                    helpCommandReceived(chatId);
                    break;

                default:
                    sendMessage(chatId, "sorry don't take command");
            }

        }

    }

    private void startCommandReceived(long chatId, String firstName) {

        userRepository.findByChatId(chatId).ifPresentOrElse(
                user -> sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"),
                () -> {
                    User newUser = new User();
                    newUser.setChatId(chatId);
                    newUser.setName(firstName);
                    userRepository.save(newUser);
                    sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
                }
        );
        String answer =
                "\uD83C\uDFCB\uFE0F\u200D‚ôÇ\uFE0F –í–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram! \uD83C\uDFCB\uFE0F\u200D‚ôÄ\uFE0F\n" +
                        "\n" +
                        "–ü—Ä–∏–≤–µ—Ç! " + firstName + "!\n" + " –Ø ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. \uD83D\uDCD3\uD83D\uDCAA\n" +
                        "–°–æ—Ö—Ä–∞–Ω—è–π —Å–≤–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! \uD83D\uDE80\n" +
                        "\n" +
                        "‚ú® –ß—Ç–æ —è —É–º–µ—é?\n" +
                        "‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ \uD83C\uDFCB\uFE0F\u200D‚ôÇ\uFE0F\n" +
                        "‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–µ—Å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥—ã" +
                        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" +
                        "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ \uD83D\uDCC5\n" +
                        "\n" +
                        "\uD83D\uDCA1 –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –¥–ª—è —Ç–µ–±—è!";
        sendMessage(chatId, answer);

    }

    private void helpCommandReceived(long chatId) {
        String answer = """
                ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
                /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
                \uD83C\uDD98 –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
                üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
                
                üèãÔ∏è *–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º!*""";
        sendMessage(chatId, answer);

    }

    private void settingsComandReceived(long chatId) {
        String answer = "–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è)";
        sendMessage(chatId, answer);

    }

    private void statisticsTraining(long chatId) {
        String answer = "–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –∂—É—Ä–Ω–∞–ª –≤—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ)";
        sendMessage(chatId, answer);
    }

    private void myTraining(long chatId) {
        String answer = "–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)";
        sendMessage(chatId, answer);
    }

    private void addTraining(long chatId) {
        String answer = "–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–¥—Ö–æ–¥—ã –∏ —Ç.–ø.)";
        sendMessage(chatId, answer);
    }


    private void sendMenuButtons(long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —ç–∫—Ä–∞–Ω
        keyboardMarkup.setOneTimeKeyboard(false); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
        row1.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        row2.add("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("\uD83C\uDD98 –ü–æ–º–æ—â—å");


        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.");
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void sendMessage(long chatId, String textToSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(textToSend);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

    }

}

